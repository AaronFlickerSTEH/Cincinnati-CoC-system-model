library(shiny)
library(tidyverse)
library(reshape2)

###Assigns homeless clients to youth/veteran projects
specialentry <- function(df){
  if("PreventionEligible" %in% colnames(df)){
    x <- df %>% group_by(ProgramPop) %>%
      mutate(Rank = 1:n(),
             RunPE = cumsum(PreventionEligible),
             Entries = ifelse(Rank == 1,
                              ifelse(Openings > PreventionEligible, PreventionEligible, Openings),
                              ifelse(RunPE <= Openings, PreventionEligible,
                                     ifelse(lag(RunPE) < Openings, Openings-lag(RunPE), 0))))
  }else{
    x <- df %>%
      group_by(ProgramPop) %>%
      mutate(Rank = 1:n(),
             RunActive = cumsum(Active),
             Entries = ifelse(Rank == 1,
                              ifelse(Openings > Active, Active, Openings),
                              ifelse(RunActive <= Openings, Active,
                                     ifelse(lag(RunActive) < Openings, Openings-lag(RunActive), 0))))
  }
  data.frame(x)
}

###Assigns homeless clients to 
entry <- function(df){
  if("PreventionEligible" %in% colnames(df)){
    x <- df %>% group_by(ProgramPop) %>%
      mutate(Rank = 1:n(),
             RunPE = cumsum(PreventionEligible),
             Entries = ifelse(Rank == 1,
                              ifelse(Openings > PreventionEligible, PreventionEligible, Openings),
                              ifelse(RunPE <= Openings, PreventionEligible,
                                     ifelse(lag(RunPE) < Openings, Openings-lag(RunPE), 0))))
  }else{
    x <- df %>%
      mutate(Rank = 1:n(),
             RunActive = cumsum(Active),
             Entries = ifelse(Rank == 1,
                              ifelse(Openings > Active, Active, Openings),
                              ifelse(RunActive <= Openings, Active,
                                     ifelse(lag(RunActive) < Openings, Openings-lag(RunActive), 0))))
  }
  data.frame(x)
}

shinyServer(function(input, output){
  ###loads in number of active clients
  active <- read.csv("active.csv") %>%
    mutate(ProgramPop = ClientPop)
  ###loads in exit rates
  exitrates <- read.csv("exitrates.csv")
  ###loads in rate of entry of first-time clients
  fth <- read.csv("fth.csv") %>%
    mutate(ProgramType = "Homeless")
  ###Loads in number of exited clients eligible for return
  inactive <- read.csv("inactive.csv")
  ###Loads in return rates of exited clients
  returnrates <- read.csv("returnrates.csv")
  ###Loads in baseline scenario
  base <- read.csv("base.csv")
  months <- 1:60
  ###Determines initial number of homeless adults
  homelessnums <- active %>%
    filter(ProgramType == "Homeless") %>%
    summarise(Total = sum(Active),
              Youth = sum(Active[ClientPop == "Youth"]),
              Months = 0)
  homelessnums <- data.frame(homelessnums)
  
  ###Determines capacity of program types based on dollar figure inputs
  capacity <- eventReactive(
    input$button,
    data.frame(ProgramType = rep(c("Prevention", "PSH", "RRH", "TH"), 3),
               ProgramPop = rep(c("Adult", "Youth", "Veteran"), each = 4),
               Spending = c(input$AdultPrevent, input$AdultPSH, input$AdultRRH, input$AdultTH,
                            input$YouthPrevent, input$YouthPSH, input$YouthRRH, input$YouthTH,
                            190080, 4245120, 348480, 823680)) %>%
      mutate(Capacity = ifelse(ProgramType == "PSH", Spending/(12*1320), Spending/(12*660))) %>%
      select(-Spending)
  )
  ###Determines number of homeless individuals 60 months out
  homelesstots <- reactive({
    for (i in months){
      ###Exits clients from housing programs
      activeafterprogramexits <- left_join(active, exitrates) %>%
        mutate(Exits = ifelse(ProgramType == "Homeless", 0, Active*ExitRate),
               Active = Active-Exits) %>%
        select(-ExitRate)
      ###Allocates transitional housing clients to RRH and PH projects
      programexits <- activeafterprogramexits %>%
        group_by(ProgramType, ClientPop, Disabled) %>%
        summarise(Exits = sum(Exits)) %>%
        mutate(RRH = ifelse(ProgramType == "TH", Exits*.122, 0),
               PSH = ifelse(ProgramType == "TH" & Disabled == 1, Exits*.023, 0))
      activeafterreentries <- programexits %>%
        select(ClientPop, Disabled, RRH, PSH) %>%
        melt(id.vars = c("ClientPop", "Disabled")) %>%
        filter(variable != "ProgramType") %>%
        mutate(ProgramType = variable,
               Reentries = as.numeric(value)) %>%
        group_by(ClientPop, Disabled, ProgramType) %>%
        summarise(Reentries = sum(Reentries)) %>%
        mutate(Months = 0) %>%
        right_join(activeafterprogramexits) %>%
        mutate(Reentries = ifelse(is.na(Reentries), 0, Reentries),
               Active = Active+Reentries) %>%
        select(-c(Exits, Reentries))
      ###Moves exited clients to inactive status
      inactiveafterreentries <- programexits %>%
        mutate(Exits = Exits-RRH-PSH) %>%
        select(-c(RRH, PSH)) %>%
        right_join(inactive) %>%
        mutate(Inactive = Inactive+Exits) %>%
        select(-Exits)
      ###Determines available capacity in housing programs
      extracapacity <- activeafterreentries %>%
        group_by(ProgramType, ProgramPop) %>%
        summarise(Active = sum(Active)) %>%
        full_join(capacity()) %>%
        filter(!is.na(Capacity)) %>%
        mutate(Openings = Capacity-Active,
               ForcedExits = ifelse(Openings < 0, abs(Openings), 0)) %>%
        select(ProgramType, ProgramPop, Openings, ForcedExits)
      if(sum(extracapacity$Openings < 0) > 0){
        ###If available capacity is negative due to budget cuts, exits clients as required
        forcedexits <- extracapacity %>%
          filter(ForcedExits > 0) %>%
          select(ProgramType, ProgramPop, ForcedExits) %>%
          right_join(activeafterreentries) %>%
          mutate(ForcedExits = ifelse(is.na(ForcedExits), 0, ForcedExits))
        forcedexits <- forcedexits[order(forcedexits$ProgramType, forcedexits$ClientPop, forcedexits$Disabled),]
        forcedexits <- forcedexits %>%
          group_by(ProgramType, ProgramPop) %>%
          mutate(RunActive = cumsum(Active),
                 Rank = 1:n())
        forcedexits$ForcedToExit <- NA
        for (l in 1:nrow(forcedexits)){
          forcedexits$ForcedToExit[l] = ifelse(forcedexits$Rank[l] == 1,
                                               ifelse(forcedexits$RunActive[l] <= forcedexits$ForcedExits[l], forcedexits$Active[l],
                                                      forcedexits$ForcedExits[l]),
                                               ifelse(forcedexits$RunActive[l] <= forcedexits$ForcedExits[l], forcedexits$Active[l],
                                                      ifelse(forcedexits$RunActive[l-1] <= forcedexits$ForcedExits[l],
                                                             forcedexits$ForcedExits[l]-forcedexits$RunActive[l-1], 0)))
        }
        ###Determines number of remaining active clients
        activeafterforcedexits <- forcedexits %>%
          mutate(Active = Active-ForcedToExit) %>%
          select(ProgramType, ProgramPop, ClientPop, Disabled, Active)
        ###Sets exited clients to inactive status
        inactiveafterforcedexits <- forcedexits %>%
          group_by(ProgramType, ClientPop, Disabled) %>%
          summarise(ForcedExits = sum(ForcedToExit)) %>%
          right_join(inactiveafterreentries) %>%
          mutate(Inactive = Inactive+ForcedExits) %>%
          select(-ForcedExits)
        }else{
          inactiveafterforcedexits <- inactiveafterreentries
          activeafterforcedexits <- activeafterreentries
        }
      ###Sets first-time clients to active status
      activeafterfth <- activeafterforcedexits %>%
        left_join(fth) %>%
        mutate(FTH = ifelse(is.na(FTH), 0, FTH),
               PreventionEligible = ifelse(is.na(PreventionEligible), 0, PreventionEligible))
      ###Enters first-time clients to veteran/youth prevention programs
      preventspecialcapacity <- extracapacity %>%
        filter(ProgramType == "Prevention",
               ProgramPop != "Adult",
               Openings > 0)
      if(nrow(preventspecialcapacity) > 0){
        preventspecialcapacity <- activeafterfth %>%
          filter(FTH > 0) %>%
          right_join(preventspecialcapacity, by = c("ClientPop" = "ProgramPop"))
        preventspecialcapacity <- preventspecialcapacity[order(preventspecialcapacity$ClientPop, -preventspecialcapacity$Disabled),]
        preventspecialcapacity <- specialentry(preventspecialcapacity)
        preventspecialactive1 <- preventspecialcapacity %>%
          mutate(ProgramType = ProgramType.y,
                 Exits = 0) %>%
          select(ProgramType, ProgramPop, Disabled, ClientPop, Entries, Exits)
        preventspecialactive2 <- preventspecialcapacity %>%
          mutate(ProgramType = ProgramType.x,
                 Exits = Entries,
                 Entries = 0) %>%
          select(ProgramType, ProgramPop, Disabled, ClientPop, Entries, Exits)
        preventspecialactive <- rbind(preventspecialactive1, preventspecialactive2)
        activeafterpreventspecial <- activeafterfth %>%
          left_join(preventspecialactive) %>%
          mutate(Entries = ifelse(is.na(Entries), 0, Entries),
                 Exits = ifelse(is.na(Exits), 0, Exits),
                 FTH = FTH-Exits,
                 PreventionEligible = PreventionEligible-Exits,
                 Active = Entries+Active) %>%
          select(-c(Exits, Entries))
        }else{
          activeafterpreventspecial <- activeafterfth
        }
      ###Enters first-time clients to general prevention programs
      preventcapacity <- extracapacity %>%
        filter(ProgramType == "Prevention",
               ProgramPop == "Adult",
               Openings > 0)
      if(nrow(preventcapacity) > 0){
        preventactive <- data.frame(activeafterpreventspecial) %>%
          filter(PreventionEligible > 0) %>%
          mutate(Openings = preventcapacity$Openings[1],
                 ProgramPop = "Adult")
        preventactive <- preventactive[order(-preventactive$Disabled, preventactive$ClientPop),]
        preventactive <- entry(preventactive)
        preventactive1 <- data.frame(preventactive) %>%
          mutate(ProgramType = "Prevention",
                 Exits = 0) %>%
          select(ProgramType, ProgramPop, Disabled, ClientPop, Entries, Exits)
        preventactive2 <- data.frame(preventactive) %>%
          mutate(Exits = Entries,
                 Entries = 0,
                 ProgramPop = ClientPop) %>%
          select(ProgramType, ProgramPop, Disabled, ClientPop, Entries, Exits)
        preventactive <- rbind(preventactive1, preventactive2) %>%
          filter(Entries > 0 | Exits > 0)
        activeafterprevent <- data.frame(activeafterpreventspecial) %>%
          full_join(preventactive, by = c("ProgramType", "ProgramPop", "ClientPop", "Disabled")) %>%
          mutate(Entries = ifelse(is.na(Entries), 0, Entries),
                 Exits = ifelse(is.na(Exits), 0, Exits),
                 FTH = FTH-Exits,
                 Active = Active+Entries+FTH) %>%
          filter(ProgramPop == ClientPop | Active > 0 | FTH > 0 | Entries > 0) %>%
          select(-c(Exits, FTH, Entries, PreventionEligible))
        }else{
          activeafterprevent <- select(activeafterpreventspecial, -c(PreventionEligible, FTH))
        }
      ###Enters homeless clients in youth/veteran PSH programs
      pshspecialcapacity <- extracapacity %>%
        filter(ProgramType == "PSH",
               ProgramPop != "Adult",
               Openings > 0)
      if(nrow(pshspecialcapacity) > 0){
        pshspecialactive <- activeafterprevent %>%
          filter(Active > 0,
                 ProgramType == "Homeless",
                 Disabled == 1) %>%
          right_join(pshspecialcapacity, by = "ProgramPop")
        pshspecialactive <- pshspecialactive[order(pshspecialactive$ClientPop),]
        pshspecialactive <- specialentry(pshspecialactive)
        pshspecialactive1 <- pshspecialactive %>%
          mutate(ProgramType = ProgramType.y) %>%
          group_by(ProgramType, ProgramPop, ClientPop, Disabled) %>%
          summarise(Entries = sum(Entries),
                    Exits = 0)
        pshspecialactive2 <- pshspecialactive %>%
          mutate(ProgramType = ProgramType.x,
                 Exits = Entries,
                 Entries = 0) %>%
          select(ProgramType, ProgramPop, Disabled, ClientPop, Entries, Exits)
        pshspecialactive <- rbind(data.frame(pshspecialactive1), pshspecialactive2)
        activeafterpshspecial <- activeafterprevent %>%
          left_join(pshspecialactive, by = c("ProgramType", "ProgramPop", "Disabled", "ClientPop")) %>%
          mutate(Entries = ifelse(is.na(Entries), 0, Entries),
                 Exits = ifelse(is.na(Exits), 0, Exits),
                 Active = Active+Entries-Exits) %>%
          select(-c(Entries, Exits))
        }else{
          activeafterpshspecial <- activeafterprevent
        }
      ###Enters homeless clients in general PSH programs
      pshcapacity <- extracapacity %>%
        filter(ProgramType == "PSH",
               ProgramPop == "Adult")
      if(pshcapacity$Openings[1] > 0){
        pshactive <- activeafterpshspecial %>%
          filter(Active > 0,
                 ProgramType == "Homeless",
                 Disabled == 1) %>%
          mutate(Openings = pshcapacity$Openings[1])
        pshactive <- pshactive[order(pshactive$ClientPop),]
        pshactive <- data.frame(entry(pshactive))
        pshactive1 <- pshactive %>%
          mutate(ProgramType = "PSH") %>%
          group_by(ProgramType, ProgramPop, ClientPop, Disabled) %>%
          summarise(Entries = sum(Entries),
                    Exits = 0) %>%
          filter(Entries > 0)
        pshactive2 <- pshactive %>%
          mutate(Exits = Entries,
                 Entries = 0) %>%
          select(ProgramType, ProgramPop, Disabled, ClientPop, Entries, Exits) %>%
          filter(Exits > 0)
        pshactive <- rbind(data.frame(pshactive1), pshactive2)
        activeafterpsh <- activeafterpshspecial %>%
          left_join(pshactive, by = c("ProgramType", "ProgramPop", "Disabled", "ClientPop")) %>%
          mutate(Entries = ifelse(is.na(Entries), 0, Entries),
                 Exits = ifelse(is.na(Exits), 0, Exits),
                 Active = Active-Exits+Entries) %>%
          select(-c(Entries, Exits))
        }else{
          activeafterpsh <- activeafterpshspecial
        }
      ###Enters homeless clients in youth/veteran RRH programs
      rrhspecialcapacity <- extracapacity %>%
        filter(ProgramType == "RRH",
               ProgramPop != "Adult",
               Openings > 0)
      if(nrow(rrhspecialcapacity) > 0){
        rrhspecialactive <- activeafterpsh %>%
          filter(Active > 0,
                 ProgramType == "Homeless") %>%
          right_join(rrhspecialcapacity, by = "ProgramPop")
        rrhspecialactive <- rrhspecialactive[order(rrhspecialactive$ClientPop, -rrhspecialactive$Disabled),]
        rrhspecialactive <- specialentry(rrhspecialactive)
        rrhspecialactive1 <- rrhspecialactive %>%
          mutate(ProgramType = ProgramType.y) %>%
          group_by(ProgramType, ProgramPop, ClientPop, Disabled) %>%
          summarise(Entries = sum(Entries),
                    Exits = 0)
        rrhspecialactive2 <- rrhspecialactive %>%
          mutate(ProgramType = ProgramType.x,
                 Exits = Entries,
                 Entries = 0) %>%
          select(ProgramType, ProgramPop, Disabled, ClientPop, Entries, Exits)
        rrhspecialactive <- rbind(data.frame(rrhspecialactive1), rrhspecialactive2)
        activeafterrrhspecial <- activeafterpsh %>%
          left_join(rrhspecialactive, by = c("ProgramType", "ProgramPop", "Disabled", "ClientPop")) %>%
          mutate(Entries = ifelse(is.na(Entries), 0, Entries),
                 Exits = ifelse(is.na(Exits), 0, Exits),
                 Active = Active-Exits+Entries) %>%
          select(-c(Entries, Exits))
        }else{
          activeafterrrhspecial <- activeafterpsh
        }
      ###Enters homeless clients in general RRH programs
      rrhcapacity <- extracapacity %>%
        filter(ProgramType == "RRH",
               ProgramPop == "Adult")
      if(rrhcapacity$Openings[1] > 0){
        rrhactive <- activeafterrrhspecial %>%
          filter(Active > 0,
                 ProgramType == "Homeless") %>%
          mutate(Openings = rrhcapacity$Openings[1])
        rrhactive <- rrhactive[order(-rrhactive$Disabled, rrhactive$ClientPop),]
        rrhactive <- data.frame(entry(rrhactive))
        rrhactive1 <- rrhactive %>%
          mutate(ProgramType = "RRH") %>%
          group_by(ProgramType, ProgramPop, ClientPop, Disabled) %>%
          summarise(Entries = sum(Entries),
                    Exits = 0) %>%
          filter(Entries > 0)
        rrhactive2 <- rrhactive %>%
          mutate(Exits = Entries,
                 Entries = 0) %>%
          select(ProgramType, ProgramPop, Disabled, ClientPop, Entries, Exits) %>%
          filter(Exits > 0)
        rrhactive <- rbind(data.frame(rrhactive1), rrhactive2)
        activeafterrrh <- activeafterrrhspecial %>%
          left_join(rrhactive, by = c("ProgramType", "ProgramPop", "Disabled", "ClientPop")) %>%
          mutate(Entries = ifelse(is.na(Entries), 0, Entries),
                 Exits = ifelse(is.na(Exits), 0, Exits),
                 Active = Active-Exits+Entries) %>%
          select(ClientPop, Disabled, ProgramType, ProgramPop, Active)
        }else{
          activeafterrrh <- activeafterrrhspecial
        }
      ###Enters homeless clients in youth/veteran transitional housing programs
      thspecialcapacity <- extracapacity %>%
        filter(ProgramType == "TH",
               ProgramPop != "Adult",
               Openings > 0)
      if(nrow(thspecialcapacity) > 0){
        thspecialactive <- data.frame(activeafterrrh) %>%
          filter(Active > 0,
                 ProgramType == "Homeless") %>%
          inner_join(thspecialcapacity, by = "ProgramPop")
        if(nrow(thspecialactive) > 0){
          thspecialactive <- thspecialactive[order(thspecialactive$ClientPop, -thspecialactive$Disabled),]
          thspecialactive <- data.frame(specialentry(thspecialactive))
          thspecialactive1 <- thspecialactive %>%
            mutate(ProgramType = ProgramType.y) %>%
            group_by(ProgramType, ProgramPop, ClientPop, Disabled) %>%
            summarise(Entries = sum(Entries),
                      Exits = 0)
          thspecialactive2 <- thspecialactive %>%
            mutate(ProgramType = ProgramType.x,
                   Exits = Entries,
                   Entries = 0) %>%
            select(ProgramType, ProgramPop, Disabled, ClientPop, Entries, Exits)
          thspecialactive <- rbind(data.frame(thspecialactive1), thspecialactive2)
          activeafterthspecial <- activeafterrrh %>%
            left_join(thspecialactive, by = c("ProgramType", "ProgramPop", "Disabled", "ClientPop")) %>%
            mutate(Entries = ifelse(is.na(Entries), 0, Entries),
                   Exits = ifelse(is.na(Exits), 0, Exits),
                   Active = Active-Exits+Entries) %>%
            select(ClientPop, Disabled, ProgramType, ProgramPop, Active)
          }else{
            activeafterthspecial <- activeafterrrh
            }
        }else{
          activeafterthspecial <- activeafterrrh
        }
      ###Enters homeless clients in general transitional housing programs
      thcapacity <- extracapacity %>%
        filter(ProgramType == "TH",
               ProgramPop == "Adult")
      if(thcapacity$Openings[1] > 0){
        thactive <- activeafterthspecial %>%
          filter(Active > 0,
                 ProgramType == "Homeless") %>%
          mutate(Openings = thcapacity$Openings[1])
        thactive <- thactive[order(-thactive$Disabled, thactive$ClientPop),]
        thactive <- entry(data.frame(thactive))
        thactive1 <- thactive %>%
          mutate(ProgramType = "TH") %>%
          group_by(ProgramType, ProgramPop, ClientPop, Disabled) %>%
          summarise(Entries = sum(Entries),
                    Exits = 0) %>%
          filter(Entries > 0)
        thactive2 <- thactive %>%
          mutate(Exits = Entries,
                 Entries = 0) %>%
          select(ProgramType, ProgramPop, Disabled, ClientPop, Entries, Exits) %>%
          filter(Exits > 0)
        thactive <- rbind(data.frame(thactive1), thactive2)
        activeafterth <- activeafterthspecial %>%
          left_join(thactive, by = c("ProgramType", "ProgramPop", "Disabled", "ClientPop")) %>%
          mutate(Entries = ifelse(is.na(Entries), 0, Entries),
                 Exits = ifelse(is.na(Exits), 0, Exits),
                 Active = Active-Exits+Entries) %>%
          select(ClientPop, Disabled, ProgramType, ProgramPop, Active)
        }else{
          activeafterth <- activeafterthspecial
        }
      ###Exits clients who self-resolve homelessness
      sr <- activeafterth %>%
        filter(ProgramType == "Homeless",
               Active > 0) %>%
        left_join(exitrates) %>%
        mutate(Exits = Active*ExitRate) %>%
        select(-c(Active, ExitRate))
      if(nrow(sr) > 0){
        activeaftersr <- left_join(activeafterth, sr) %>%
          mutate(Exits = ifelse(is.na(Exits), 0, Exits),
                 Active = Active-Exits) %>%
          select(-Exits)
        inactiveaftersr <- sr %>%
          group_by(ProgramType, ClientPop, Disabled) %>%
          summarise(Exits = sum(Exits)) %>%
          right_join(inactiveafterforcedexits) %>%
          mutate(Exits = ifelse(is.na(Exits), 0, Exits),
                 Inactive = Exits+Inactive) %>%
          select(-Exits)
        }else{
          activeaftersr <- activeafterth
          inactiveaftersr <- inactiveafterforcedexits
        }
      ###Sets returning clients to homeless status
      recid <- left_join(inactiveaftersr, returnrates) %>%
        mutate(Recid = Inactive*ReturnRate)
      inactiveafterrecid <- recid %>%
        mutate(Inactive = Inactive-Recid,
               Inactive = Inactive*23/24) %>%
        select(ProgramType, ClientPop, Disabled, Inactive)
      inactiveageout <- data.frame(inactiveafterrecid) %>%
        mutate(AgeOut = ifelse(ClientPop == "Youth", Inactive/72, 0))
      inactive <- inactiveageout %>%
        filter(AgeOut > 0) %>%
        mutate(ClientPop = "Adult",
               AgeIn = AgeOut) %>%
        select(-c(Inactive, AgeOut)) %>%
        right_join(inactiveageout) %>%
        mutate(AgeIn = ifelse(is.na(AgeIn), 0, AgeIn),
               Inactive = AgeIn+Inactive-AgeOut) %>%
        select(ProgramType, ClientPop, Disabled, Inactive)
      activeafterrecid <- data.frame(recid) %>%
        mutate(ProgramType = "Homeless",
               ProgramPop = ClientPop) %>%
        group_by(ProgramType, ProgramPop, ClientPop, Disabled) %>%
        summarise(Recid = sum(Recid)) %>%
        right_join(activeaftersr) %>%
        mutate(Recid = ifelse(is.na(Recid), 0, Recid),
               Active = Active+Recid) %>%
        select(-Recid) %>%
        filter(ProgramPop == ClientPop | Active > 0)
      ###Ages clients out of youth status
      activeageout <- activeafterrecid %>%
        mutate(AgeOut = ifelse(ClientPop == "Youth", Active/72, 0))
      ###Records number homeless at end of month
      active <- data.frame(activeageout) %>%
        filter(AgeOut > 0) %>%
        mutate(AgeIn = AgeOut,
               ClientPop = "Adult",
               ProgramPop = ifelse(ProgramType == "Homeless", ClientPop, ProgramPop)) %>%
        select(-c(Active, AgeOut)) %>%
        full_join(activeageout) %>%
        mutate(AgeOut = ifelse(is.na(AgeOut), 0, AgeOut),
               AgeIn = ifelse(is.na(AgeIn), 0, AgeIn),
               Active = ifelse(is.na(Active), 0, Active),
               Active = Active+AgeIn-AgeOut) %>%
        select(-c(AgeOut, AgeIn))
      hl <- filter(data.frame(active), ProgramType == "Homeless") 
      homelessnums[i+1,] <- c(sum(hl$Active), sum(hl$Active[hl$ClientPop == "Youth"]), i)
    }
    melt(homelessnums, id.vars = "Months") %>%
      mutate(prediction = "model") %>%
      rbind(base) %>%
      filter(Months == 60)
  })
  output$outcome <- renderPlot({
    ggplot(homelesstots(), aes(x=variable, y=value, fill=prediction)) + geom_bar(stat = "identity", position = "dodge") +
      labs(x=NULL, y=NULL, title="Individuals experiencing homelessness in 60 months", fill=NULL) + theme_minimal() + 
      theme(legend.position = "bottom",
            text = element_text(size = 14, family = "Arial"),
            axis.title = element_text(size = 18),
            plot.title = element_text(size = 24, hjust = .5, colour = "#004274", face = "bold"),
            panel.grid.minor = element_blank(),
            panel.grid.major.x = element_blank(),
            strip.background = element_rect(fill = "#89C1D7", color="black"),
            strip.text = element_text(face = "bold", size = rel(1.2))) + 
      scale_fill_manual(values = c("#004274", "#F79428"), labels=c("Baseline", "Model")) + 
      scale_y_continuous(limits = c(0, 1100), breaks = seq(0, 1000, 250), labels = format(seq(0, 1000, 250), big.mark = ",")) +
      geom_text(aes(label=round(value, 0)), position = position_dodge(0.9), vjust=-0.5)
  })
})
  
